[{"name":"YouTubeVideoUrl","fqn":"module::702316716::YouTubeVideoUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":78,"endLine":80,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**YouTubeVideo**\n\nType pattern which will match all URL's which relate to\na YouTubeVideo.\n\n**Note:** there can be some _false positives_ when the query parameters\nmay state that this is a video to watch in a list of videos. You can avoid\nthis ambiguity with the `IsYouTubeVideo` and `IsYouTubeList` operators.","tags":[]}],"deps":["module::4212651546::YouTubeShareUrl"],"symbolHash":3981625362,"updated":1723738608073},{"name":"YouTubeUsersPlaylistUrl","fqn":"module::2718340716::YouTubeUsersPlaylistUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":158,"endLine":158,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**YouTubeUsersPlaylistUrl**\n\nThe URL which brings a logged in user to their own playlists.\n\n**Related:** `YouTubePlaylistUrl`","tags":[]}],"deps":["module::812936183::AnyQueryParams"],"symbolHash":3267049077,"updated":1723738608074},{"name":"YouTubeUrl","fqn":"module::3621971459::YouTubeUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":52,"endLine":52,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**YouTubeUrl**\n\nA type which should match all URL's pointing to YouTube","tags":[]}],"deps":["module::1120222348::UrlsFrom"],"symbolHash":4230337548,"updated":1723738608073},{"name":"YouTubeSubscriptionsUrl","fqn":"module::1990536081::YouTubeSubscriptionsUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":188,"endLine":188,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**YouTubeSubscriptionsUrl**\n\nThe URL which brings a logged in user to their list of subscriptions.","tags":[]}],"deps":["module::812936183::AnyQueryParams"],"symbolHash":4286653489,"updated":1723738608075},{"name":"YouTubeShareUrl","fqn":"module::4212651546::YouTubeShareUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":66,"endLine":66,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**YouTubeShareUrl**\n\na URL which comes from YouTube's _URL shortened_ `https://youtu.be` site.","tags":[]}],"deps":["module::1120222348::UrlsFrom"],"symbolHash":3309442188,"updated":1723738608073},{"name":"YouTubePlaylistUrl","fqn":"module::2557939062::YouTubePlaylistUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":108,"endLine":113,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**YouTubePlaylistUrl**\n\nA URL pattern which should match all playlist URL's on YouTube.\nThat includes both the logged in user's as well as other peoples.\n\n**Related:** `YouTubeUsersPlaylistUrl`","tags":[]}],"deps":["module::1120222348::UrlsFrom","module::2718340716::YouTubeUsersPlaylistUrl"],"symbolHash":3897477597,"updated":1723738608074},{"name":"YouTubeLikedPlaylistUrl","fqn":"module::270513030::YouTubeLikedPlaylistUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":166,"endLine":166,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**YouTubeLikedPlaylistUrl**\n\nThe URL which brings a logged in user to a playlist of their _liked_\nvideos.","tags":[]}],"deps":[],"symbolHash":896534053,"updated":1723738608074},{"name":"YouTubeHistoryUrl","fqn":"module::1921914955::YouTubeHistoryUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":181,"endLine":181,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**YouTubeHistoryUrl**\n\nThe URL which brings a logged in user to a list of their previously watched\nvideos.","tags":[]}],"deps":["module::812936183::AnyQueryParams"],"symbolHash":1354137066,"updated":1723738608075},{"name":"YouTubeFeedUrl","fqn":"module::929252488::YouTubeFeedUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":145,"endLine":149,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**YouTubeFeedUrl**`<[T]>`\n\nA URL pattern which matches all \"feeds\" on YouTube where\n\"feeds\" are pages that organize videos/content for a logged\nin user based on their configuration.\n\nBy default, all feed URLs are matched but you can narrow\nthis matching down by choosing a value for `T` in the\n`YouTubeFeedType` union.","tags":[]}],"deps":["module::1299579409::YouTubeFeedType","module::1897058928::AsString","local::1506538163::FeedMap"],"symbolHash":2049123108,"updated":1723738608074},{"name":"YouTubeEmbedUrl","fqn":"module::523925260::YouTubeEmbedUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":94,"endLine":97,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"TVideo","type":"TVideo"}],"jsDocs":[{"comment":"","tags":[]}],"deps":["module::1120222348::UrlsFrom"],"symbolHash":741263624,"updated":1723738608074},{"name":"YouTubeCreatorUrl","fqn":"module::1226739402::YouTubeCreatorUrl","filepath":"src/types/string-literals/character-sets/YouTube.ts","startLine":88,"endLine":91,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**YouTubeCreatorUrl**\n\nPages associated with a YouTube creator. This can include your own\npages even if you don't consider yourself a full creator (yet).","tags":[]}],"deps":["module::1120222348::UrlsFrom","module::1827247990::Optional"],"symbolHash":618331654,"updated":1723738608074},{"name":"UrlsFrom","fqn":"module::2731538471::UrlsFrom","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":405,"endLine":418,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"},{"name":"TOpt","type":"TOpt"}],"jsDocs":[{"comment":"**UrlsFrom**`<T, [TOpt]>`\n\nUtility which generates a type for all valid URLs in the given\npartial URL.\n\n- you can configure whether the protocol should be _optional_\nand whether _insecure_ URL's should be allowed with `TOpt`\n- you can also switch the protocol between `http`,`ws`, or `both`\n- the default protocol is `http`","tags":[]}],"deps":["module::3970046955::ProtocolOptions","module::3018255031::PortSpecifierOptions","module::2312436937::UrlOptions","module::4114441065::EmptyObject","module::3295405837::ExpandUnion","local::363308419::_UrlsFrom","module::2535688849::TupleToUnion","module::172457424::IsStringLiteral","module::1897058928::AsString"],"symbolHash":1783696603,"updated":1723738608062},{"name":"UrlPort","fqn":"module::3045974454::UrlPort","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":103,"endLine":109,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"TOpt","type":"TOpt"}],"jsDocs":[{"comment":"**UrlPort**`<TOpt>`\n\nProduces a string literal for the _port_ designation of\nmany protocols. Basically just a `:${number}` and\nthen possibly a space.\n\n- `TOpt` allows you to state whether the port should be:\n  - `optional`\n  - `required`\n  - or `not-allowed`","tags":[]}],"deps":["module::3018255031::PortSpecifierOptions","local::363308419::portRequirement","local::363308419::ports","local::363308419::_Ports"],"symbolHash":2929937736,"updated":1723738608056},{"name":"UrlPath","fqn":"module::3109433725::UrlPath","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":216,"endLine":226,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**UrlPath**`<T>`\n\nA simple type that represents the _shape_ of a UrlPath\nwhen no generics are used (aka, `T` is defaulted to _null_).\n\nThis type is either an empty string `''` or a string starting\nwith a `/` character.\n\nIf you want more detailed type checking of the path you can\npass in a string to `T` and it will be validated and return\n`never` when an invalid character is used.","tags":[]}],"deps":["local::363308419::UrlPathChars","module::172457424::IsStringLiteral","module::4075062972::StripChars"],"symbolHash":515804633,"updated":1723738608058},{"name":"UrlOptions","fqn":"module::2312436937::UrlOptions","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":160,"endLine":170,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"","tags":[]}],"deps":["local::363308419::queryParameters"],"symbolHash":3229078157,"updated":1723738608057},{"name":"UrlBuilder","fqn":"module::370738562::UrlBuilder","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":336,"endLine":342,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"","tags":[]}],"deps":["module::1762127496::NetworkProtocol","module::3045542239::DomainName","module::504683037::RelativeUrl","local::363308419::protocol","local::363308419::domain","local::363308419::basePath","local::363308419::url"],"symbolHash":1968470841,"updated":1723738608061},{"name":"RepoUrls","fqn":"module::2878573835::RepoUrls","filepath":"src/types/string-literals/character-sets/Repos.ts","startLine":36,"endLine":38,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"","tags":[]}],"deps":["module::1120222348::UrlsFrom","module::3529663403::Flatten","module::13543941::Mutable","module::3974819915::Values","module::1465190110::REPO_SOURCE_LOOKUP"],"symbolHash":1648435842,"updated":1723738608071},{"name":"RemoveUrlSource","fqn":"module::3030774352::RemoveUrlSource","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":251,"endLine":259,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**RemoveUrlSource**`<T>`\n\nRemoves the URL source (aka, domain name or IP address) from a URL string when\nit can be identified.","tags":[]}],"deps":["module::172457424::IsStringLiteral","module::195169549::GetUrlSource"],"symbolHash":2615542691,"updated":1723738608058},{"name":"RemoveUrlPort","fqn":"module::2355278319::RemoveUrlPort","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":138,"endLine":146,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**RemoveUrlPort**`<T,[TOpt]>`\n\nRemoves a _port specification_ in a URL if found otherwise returns string literal\nas it was.","tags":[]}],"deps":["module::172457424::IsStringLiteral","module::4245877116::RemoveNetworkProtocol","module::1665174636::GetUrlProtocolPrefix","module::984903483::StripWhile","module::1881292962::NumericChar"],"symbolHash":3941755148,"updated":1723738608057},{"name":"RelativeUrl","fqn":"module::504683037::RelativeUrl","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":327,"endLine":327,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"**RelativeUrl**","tags":[]}],"deps":["local::363308419::RelativeStart","module::3109433725::UrlPath"],"symbolHash":3910072098,"updated":1723738608060},{"name":"IsUrl","fqn":"module::1199865088::IsUrl","filepath":"src/types/boolean-logic/operators/IsUrl.ts","startLine":45,"endLine":64,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"TTest","type":"TTest"},{"name":"TProtocol","type":"TProtocol"}],"jsDocs":[{"comment":"**IsUrl**`<TTest,[TProtocol]>`\n\nBoolean operator which tests whether the passed in `TTest`\nis a valid URL.\n\n**Note:** by default it will only check the `https` protocol\nbut you can choose any set `TProtocol` with anything from `NetworkProtocol`\nif you like.\n\n**Note:** you can add **optional** as a part of the protocol union\ntype and it will then accept the protocols you've selected or a URL\nwithout a protocol.","tags":[]}],"deps":["module::2966373716::NetworkProtocol","module::172457424::IsStringLiteral","module::83169107::And","module::2376902257::Or","module::3147694355::HasNetworkProtocolReference","module::488874576::Extends","module::2121051408::HasUrlPath","module::2472775512::HasUrlSource"],"symbolHash":2325260876,"updated":1723738607847},{"name":"HasUrlSource","fqn":"module::2472775512::HasUrlSource","filepath":"src/types/boolean-logic/operators/IsUrl.ts","startLine":24,"endLine":24,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"","tags":[]}],"deps":["module::3858944705::Not","module::80185219::IsNever","module::1089226927::GetUrlSource"],"symbolHash":3759518129,"updated":1723738607846},{"name":"HasUrlPath","fqn":"module::2121051408::HasUrlPath","filepath":"src/types/boolean-logic/operators/IsUrl.ts","startLine":15,"endLine":22,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"","tags":[]}],"deps":["module::83169107::And","module::3858944705::Not","module::80185219::IsNever","module::336478937::GetUrlPath","module::2376902257::Or","module::488874576::Extends"],"symbolHash":3945359399,"updated":1723738607846},{"name":"GithubRepoUrl","fqn":"module::1889877863::GithubRepoUrl","filepath":"src/types/string-literals/character-sets/Repos.ts","startLine":78,"endLine":84,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**GithubRepoUrl**`<[T]>`\n\nA type which represents the pattern of a URL pointing a repository\non Github.\n\nWhen used _without the provided generic_ it provides a decent shape but will introduce\nfalse positives due to URL subpaths that exist.\n\nIf you pass the value through the generic `T` then it will proxy the value through\nif it's a valid Repo URL (including a subpath validation) or `never` if it is not.","tags":[]}],"deps":["module::3629498205::Constant","module::2350035540::AlphaNumericChar","module::336478937::GetUrlPath"],"symbolHash":3340744388,"updated":1723738608071},{"name":"GithubProjectsUrl","fqn":"module::669924636::GithubProjectsUrl","filepath":"src/types/string-literals/character-sets/Repos.ts","startLine":109,"endLine":112,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"TOnlySummary","type":"TOnlySummary"}],"jsDocs":[{"comment":"**GithubProjectsUrl**`<[TOnlySummary]>`\n\nProvides a shape for either the _projects summary_ page of a repo on Github\nor that plus any specific _issue_ URLs.\n\n- by default it will show any Projects page but set `TOnlySummary` to false\nif you're only wanting to match the summary page.","tags":[]}],"deps":["module::4187212716::IsTrue"],"symbolHash":1146352497,"updated":1723738608071},{"name":"GithubIssuesUrl","fqn":"module::794012385::GithubIssuesUrl","filepath":"src/types/string-literals/character-sets/Repos.ts","startLine":95,"endLine":98,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"TOnlySummary","type":"TOnlySummary"}],"jsDocs":[{"comment":"**GithubIssuesUrl**`<[TOnlySummary]>`\n\nProvides a shape for either the _issues summary_ page of a repo on Github\nor that plus any specific _issue_ URLs.\n\n- by default it will show any issues page but set `TOnlySummary` to false\nif you're only wanting to match the summary page.","tags":[]}],"deps":["module::4187212716::IsTrue"],"symbolHash":590748176,"updated":1723738608071},{"name":"GithubInsightUrl","fqn":"module::1204465211::GithubInsightUrl","filepath":"src/types/string-literals/character-sets/Repos.ts","startLine":168,"endLine":176,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**GithubInsightUrl**`<[T]>`\n\nProvides a URL shape that fits all of the _insights_ pages\nfor a repo on Github.\n\n- if you want to pair down the types of insight pages you're\nmatching for you can specify `T` as some union type of `GithubInsightPageType`","tags":[]}],"deps":["module::894899468::GithubInsightPageType","module::3393438424::IsUnion","module::2535688849::TupleToUnion","local::2596737201::_GithubInsightUrl","module::3860303104::As","module::458105997::UnionToTuple","local::2596737201::GhLookup"],"symbolHash":1116342424,"updated":1723738608072},{"name":"GithubActionsUrl","fqn":"module::2458836022::GithubActionsUrl","filepath":"src/types/string-literals/character-sets/Repos.ts","startLine":123,"endLine":126,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"TOnlySummary","type":"TOnlySummary"}],"jsDocs":[{"comment":"**GithubActionsUrl**`<[TOnlySummary]>`\n\nProvides a shape for either the _actions summary_ page of a repo on Github\nor that plus any specific Job URLs.\n\n- by default it will show any actions related page but set `TOnlySummary` to false\nif you're only wanting to match the summary page.","tags":[]}],"deps":["module::4187212716::IsTrue"],"symbolHash":3694503041,"updated":1723738608072},{"name":"GetUrlSource","fqn":"module::195169549::GetUrlSource","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":236,"endLine":243,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**GetUrlSource**`<T>`\n\nExtracts out the IP address or Domain Name from a URL-like string literal.\n\n- if _not_ a string literal then just proxies through `string`\n- if not able to find it then it returns the literal ''","tags":[]}],"deps":["module::172457424::IsStringLiteral","module::580907674::StripAfter","module::4245877116::RemoveNetworkProtocol","module::3344972288::DnsName","module::2631466056::Ip4Address"],"symbolHash":1875190917,"updated":1723738608058},{"name":"GetUrlQueryParams","fqn":"module::165002419::GetUrlQueryParams","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":297,"endLine":306,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"},{"name":"S","type":"S"}],"jsDocs":[{"comment":"**GetUrlQueryParams**`<T, [S]>`\n\nGiven a URL passed into `T`, this utility will extract the\nquery parameters portion of the URL or `\"\"` if none exists.","tags":[]}],"deps":["module::1274869242::IsUndefined","module::2698938817::Contains"],"symbolHash":380912337,"updated":1723738608059},{"name":"GetUrlProtocolPrefix","fqn":"module::1665174636::GetUrlProtocolPrefix","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":78,"endLine":82,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**GetUrlProtocolPrefix**`<T>`\n\nJust like `GetUrlProtocol` but adds in the `://` so long\nas there's a protocol found.","tags":[]}],"deps":["module::691518232::GetUrlProtocol","module::1762127496::NetworkProtocol","module::696923552::NetworkProtocolPrefix"],"symbolHash":1238055940,"updated":1723738608055},{"name":"GetUrlProtocol","fqn":"module::691518232::GetUrlProtocol","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":64,"endLine":70,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**GetUrlProtocol**`<T>`\n\nGets the network protocol used in the URL string passed into `T`.","tags":[]}],"deps":["module::696923552::NetworkProtocolPrefix","module::580907674::StripAfter","module::1364134543::IsEqual"],"symbolHash":4023517356,"updated":1723738608055},{"name":"GetUrlPort","fqn":"module::4224325149::GetUrlPort","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":120,"endLine":126,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**GetUrlPort**`<T>`\n\nReturns the port designated in the URL passed in if found.\n\n- if `T` is a literal string and port not found then value is \"default\"\n- if `T` is a wide string then the value will be `number | \"default\"`\n- all non-string based values result in `never`","tags":[]}],"deps":["module::172457424::IsStringLiteral","module::4245877116::RemoveNetworkProtocol","module::116081596::AsNumber","module::3128425614::RetainWhile","module::1881292962::NumericChar"],"symbolHash":3769383081,"updated":1723738608056},{"name":"GetUrlPath","fqn":"module::3110882155::GetUrlPath","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":282,"endLine":288,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**GetUrlPath**`<T>`\n\nExtracts the URL's path from a full URL/URI.\n\n- removes any reference to the network protocol\n- removes the domain name or IP address\n- removes any trailing query parameters","tags":[]}],"deps":["module::172457424::IsStringLiteral","local::363308419::_GetUrlPath","module::3030774352::RemoveUrlSource","module::4245877116::RemoveNetworkProtocol","module::2355278319::RemoveUrlPort"],"symbolHash":4102394557,"updated":1723738608059},{"name":"FullyQualifiedUrl","fqn":"module::746163013::FullyQualifiedUrl","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":334,"endLine":334,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[],"jsDocs":[{"comment":"A literal variant of _string_ which forces a string to follow conventions\nfor a fully qualified URL like `https://google.com`. It can't ensure the\ntype is fully valid but does help to avoid some typos.","tags":[]}],"deps":["module::1762127496::NetworkProtocol","module::2631466056::Ip4Address","module::3045542239::DomainName"],"symbolHash":715169243,"updated":1723738608060},{"name":"AddUrlPathSegment","fqn":"module::709167836::AddUrlPathSegment","filepath":"src/types/string-literals/character-sets/Url.ts","startLine":359,"endLine":364,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"TExisting","type":"TExisting"},{"name":"TAdd","type":"TAdd"}],"jsDocs":[{"comment":"**AddUrlPathSegment**`<TExisting, TAdd>`\n\nAdds a new URL path segment, ensuring that appropriate\n`/` representation is preserved.","tags":[]}],"deps":["module::3241023069::StripTrailing","module::2603245803::StripLeading"],"symbolHash":3651645293,"updated":1723738608061},{"name":"IsYouTubeVideoUrl","fqn":"module::1996439837::IsYouTubeVideoUrl","filepath":"src/types/boolean-logic/operators/YouTube-operators.ts","startLine":43,"endLine":52,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"TTest","type":"TTest"},{"name":"TKind","type":"TKind"}],"jsDocs":[{"comment":"**IsYouTubeVideoUrl**`<TTest,[TKind]>`\n\nBoolean operator which returns _true_ when the string is a\npossible YouTube URL which is for playing a video.\n\n**Note:** by default any URL which plays a video is allowed but\nyou can change `TKind` to \"single-video\" or \"video-in-playlist\"\nto isolate to just one of the play styles.\n\n**Related:** `IsYouTubeUrl`, `YouTubeVideoUrl`","tags":[]}],"deps":["local::2159697161::VideoUrlKind","module::172457424::IsStringLiteral","module::4083180366::YouTubeVideoUrl","local::2159697161::_VideoKind","module::790210903::GetUrlQueryParams"],"symbolHash":2301808433,"updated":1723738608669},{"name":"IsYouTubeUrl","fqn":"module::2113172788::IsYouTubeUrl","filepath":"src/types/boolean-logic/operators/YouTube-operators.ts","startLine":11,"endLine":17,"scope":"module","flags":["None","TypeAlias","PropertyExcludes","NamespaceModuleExcludes"],"kind":"type-defn","generics":[{"name":"T","type":"T"}],"jsDocs":[{"comment":"**IsYouTubeUrl**`<T>`\n\nBoolean operator which returns _true_ when the string is a\npossible YouTube URL.","tags":[]}],"deps":["module::172457424::IsStringLiteral","module::788639442::YouTubeUrl"],"symbolHash":2200677062,"updated":1723738608668}]
