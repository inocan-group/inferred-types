import { 
  AfterFirst, 
  Container, 
  First, 
  FirstOfEach, 
  IfStringLiteral, 
  IndexOf, 
  Split,
  StripAfter,
  StripBefore,
  Trim,  
} from "src/types";
import { LastOfEach } from "../src/types/tuples/LastOfEach";

type DefaultDelimiters = [["[[","]]"], ["{{","}}"]];
/**
 * A union type of all the valid _opening_ delimiters
 */
type OpenDelimiters<T extends readonly [string, string][] | undefined> = T extends readonly [string, string][]
  ? FirstOfEach<T>
  : FirstOfEach<DefaultDelimiters>;

/** A union type of all the valid _closing_ delimiters */
type CloseDelimiters<T extends readonly [string, string][] | undefined> = T extends readonly [string, string][]
? LastOfEach<T>
: LastOfEach<DefaultDelimiters>;

type ContainerId<
  TContent extends string,
  TClosing extends string,
> = Trim<StripAfter<TContent, TClosing>>;

type Replacement<
  TContent extends string,
  TContainer extends Container,
  TClosing extends string,
> = ContainerId<TContent, TClosing> extends keyof TContainer
? `${IndexOf<TContainer, ContainerId<TContent, TClosing>>}${StripBefore<TContent, TClosing>}`
: "";


/**
 * **Process**
 * 
 * Process the text value; making replacement using delimiters and container's
 * key/values.
 */
type Process<
  // blocks of text broken up by starting interpolation string
  TBlocks extends readonly string[],
  TContainer extends Container,
  TClosing extends string,
  TResults extends readonly string[] = []
> = [] extends TBlocks
? TResults
: Process<
    AfterFirst<TBlocks>,
    TContainer,
    TClosing,
    [
      ...TResults,
      Replacement<First<TBlocks>, TContainer, TClosing>
    ]
  >;



/**
 * **Interpolate**`<TText,TContainer,[TOpt]>`
 * 
 * Text based type utility which updates the type of `TText` based
 * on replacing _delimited text_ with a true value found in the `TContainer`
 * passed in. 
 * ```ts
 * // Hello World
 * type T = Interpolate<"{{0}} {{1}}", ["Hello", "World"]>;
 * type O  = Interpolate<"[[h]] [[w]]", { h: "Hello"; w: "World" } >;
 * ``` 
 * 
 * - by default text is delimited by double square and curly braces
 * -- as is shown in the examples above -- but you can add in your own delimiters
 * with `TDelimiters` if  you choose.
 * - interpolated blocks which do not match _data_ found in the container will be left
 * as interpolated blocks unless you pass in a value for `TMissing`
 */
export type Interpolate<
  TText extends string,
  TContainer extends Container,
  TOpt extends { delimiters?: readonly [string, string][]; missing?: string } = object
> = IfStringLiteral<
  TText,
  Process<
    Split<
      TText, 
      OpenDelimiters<TOpt["delimiters"]>
    > & readonly string[],
    TContainer,
    CloseDelimiters<TOpt["delimiters"]>
  >,
  string
>;
